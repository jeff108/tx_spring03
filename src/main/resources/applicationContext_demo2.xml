<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
		        http://www.springframework.org/schema/beans
		        http://www.springframework.org/schema/beans/spring-beans.xsd
		        http://www.springframework.org/schema/context
		        http://www.springframework.org/schema/context/spring-context.xsd
                http://www.springframework.org/schema/aop
                http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--管理bean对象-->
    <bean id="userService" class="cn.tx.demo2.UserServiceImpl"/>

    <!--配置切面类，把该类交给IOC容器管理-->
    <bean id="myXmlAspect" class="cn.tx.demo2.MyXmlAspect"/>

    <!--配置AOP的增强-->
    <aop:config>
        <!--配置切面 = 切入点 + 通知组成-->
        <aop:aspect ref="myXmlAspect">
            <!--前置通知：UserServiceImpl的save方法执行前，会增强
                <aop:before method="log" pointcut="execution(public void cn.tx.demo2.UserServiceImpl.save())" />
            -->

            <!--
                切入点的表达式
                    execution() 固定的写法
                    public          是可以省略不写的
                   方法的返回值      int String 通用的写法，可以编写 * 不能省略不写的
                   包名+类名        不能省略不写的，编写 *  UserServiceImpl AccountServiceImpl
                   方法名称         save() 可以写 *
                   参数列表         (..) 表示任意类型和个数的参数
                   比较通用的表达式：execution(public * cn.tx.*.*ServiceImpl.*(..))

                <aop:before method="log" pointcut="execution(* cn.tx.*.*ServiceImpl.save*(..))" />
            -->

            <!--
                AOP的通知类型
                    前置通知：目标方法执行前，进行增强。
                        <aop:before method="log" pointcut="execution(* cn.tx.*.*ServiceImpl.save*(..))" />
                    最终通知：目标方法执行成功或者失败，进行增强。
                        <aop:after method="log" pointcut="execution(* cn.tx.*.*ServiceImpl.save*(..))" />
                    后置通知：目标方法执行成功后，进行增强。
                        <aop:after-returning method="log" pointcut="execution(* cn.tx.*.*ServiceImpl.save*(..))" />
                    异常通知：目标方法执行失败后，进行增强。
                        <aop:after-throwing method="log" pointcut="execution(* cn.tx.*.*ServiceImpl.save*(..))" />
                    环绕通知：目标方法执行前后，都可以进行增强。目标对象的方法需要手动执行。
            -->
            <aop:around method="aroundLog" pointcut="execution(* cn.tx.*.*ServiceImpl.save*(..))" />

        </aop:aspect>
    </aop:config>

</beans>